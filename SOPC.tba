; Nguyen Doan
; CECS 460
; FULL UART
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Declarations of all constants using equates: EQU
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

POINT  		EQU    	R0
IN_COUNT	EQU    	R1
VALUE		EQU    	R2
STATUS		EQU    	R3
IN		EQU    	R4
NL_FLAG		EQU    	R5
COUNT		EQU    	R6
LED_COUNT   	EQU    	R7
BANNER_FLAG	EQU     R8	
PROMPT_FLAG	EQU	R9
TX_FLAG 	EQU	RA
BS_FLAG		EQU	RC
LED		EQU	RF
ZEROS  		EQU    	0000
ONE		EQU    	0001

; ADDRESS CONSTANTS
DATA_ADR 	EQU	0000
STATUS_ADR	EQU 	0001
LED_ADR		EQU	0002
SEVEN_SEG1 	EQU 	0003
SEVEN_SEG2	EQU	0004
SWITCHES	EQU 	0005
UART_CONFIG	EQU 	0006

; ASCII CONSTANTS
CAPITAL_A	EQU	0041
CAPITAL_B	EQU     0042
CAPITAL_C	EQU     0043
CAPITAL_D	EQU     0044
CAPITAL_E	EQU     0045
CAPITAL_F 	EQU     0046
CAPITAL_G 	EQU     0047
CAPITAL_H 	EQU     0048
CAPITAL_I 	EQU     0049
CAPITAL_J 	EQU     004A
CAPITAL_K 	EQU     004B
CAPITAL_L 	EQU     004C
CAPITAL_M 	EQU     004D
CAPITAL_N 	EQU     004E
CAPITAL_O 	EQU     004F
CAPITAL_P 	EQU     0050
CAPITAL_Q 	EQU     0051
CAPITAL_R 	EQU     0052
CAPITAL_S	EQU     0053
CAPITAL_T 	EQU     0054
CAPITAL_U	EQU     0055
CAPITAL_V 	EQU     0056
CAPITAL_W 	EQU     0057
CAPITAL_X	EQU     0058
CAPITAL_Y	EQU     0059
CAPITAL_Z	EQU     005A
BACKSPACE 	EQU	0008
SPACE		EQU     0020
NUMBER_0	EQU     0030
NUMBER_1	EQU     0031
NUMBER_2	EQU     0032
NUMBER_3	EQU     0033
NUMBER_4	EQU     0034
NUMBER_5	EQU     0035
NUMBER_6	EQU     0036
NUMBER_7	EQU     0037
NUMBER_8	EQU     0038
NUMBER_9	EQU     0039
CR  		EQU     000D
LF		EQU     000A
SYMBOL_!	EQU	0021
SYMBOL_"	EQU	0022
SYMBOL_#	EQU	0023
SYMBOL_$	EQU	0024
SYMBOL_%	EQU	0025
SYMBOL_&	EQU	0026
SYMBOL_'	EQU	0027
SYMBOL_(	EQU	0028
SYMBOL_)	EQU	0029
SYMBOL_*	EQU	002A
SYMBOL_+	EQU	002B
SYMBOL_,	EQU	002C
SYMBOL_-	EQU	002D
SYMBOL_.	EQU	002E
SYMBOL_/	EQU	002F
SYMBOL_:	EQU	003A
SYMBOL_;	EQU	003B
SYMBOL_<	EQU	003C
SYMBOL_=	EQU	003D
SYMBOL_>	EQU	003E
SYMBOL_?	EQU	003F
SYMBOL_@	EQU	0040
SYMBOL_~ 	EQU	007E
LETTER_a	EQU 	0061 
LETTER_b	EQU 	0062 
LETTER_c	EQU 	0063 
LETTER_d	EQU 	0064 
LETTER_e	EQU 	0065
LETTER_f	EQU 	0066 
LETTER_g	EQU 	0067 
LETTER_h	EQU 	0068 
LETTER_i	EQU 	0069 
LETTER_j	EQU 	006A 
LETTER_k	EQU 	006B 
LETTER_l	EQU 	006C 
LETTER_m	EQU 	006D 
LETTER_n	EQU 	006E 
LETTER_o	EQU 	006F 
LETTER_p	EQU 	0070 
LETTER_q	EQU 	0071 
LETTER_r	EQU 	0072 
LETTER_s	EQU 	0073 
LETTER_t	EQU 	0074 
LETTER_u	EQU 	0075 
LETTER_v	EQU 	0076 
LETTER_w	EQU 	0077 
LETTER_x	EQU 	0078 
LETTER_y	EQU 	0079 
LETTER_z	EQU 	007A




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialization code - tasks to accomplish before program runs
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INIT   	CALL 	UART_CONTROL
	;BANNER
	;Last login: Thurs Apr 9 on npd123
	;---------------------------------------------
	LOAD 	VALUE, CAPITAL_L
	STORE	VALUE, 0000
	LOAD 	VALUE, LETTER_a
	STORE 	VALUE, 0001
	LOAD 	VALUE, LETTER_s
	STORE 	VALUE, 0002
	LOAD 	VALUE, LETTER_t
	STORE 	VALUE, 0003
	LOAD 	VALUE, SPACE
	STORE 	VALUE, 0004
	LOAD 	VALUE, LETTER_l
	STORE 	VALUE, 0005
	LOAD 	VALUE, LETTER_o
	STORE 	VALUE, 0006
	LOAD	VALUE, LETTER_g
	STORE	VALUE, 0007
	LOAD	VALUE, LETTER_i 
	STORE	VALUE, 0008
	LOAD 	VALUE, LETTER_n
	STORE	VALUE, 0009
	LOAD	VALUE, SYMBOL_:
	STORE	VALUE, 000A
	LOAD 	VALUE, SPACE
	STORE	VALUE, 000B
	LOAD	VALUE, CAPITAL_T 
	STORE	VALUE, 000C
	LOAD	VALUE, LETTER_h
	STORE	VALUE, 000D
	LOAD	VALUE, LETTER_u
	STORE	VALUE, 000E
	LOAD	VALUE, LETTER_r
	STORE	VALUE, 000F
	LOAD	VALUE, LETTER_s
	STORE	VALUE, 0010
	LOAD 	VALUE, SPACE
	STORE	VALUE, 0011
	LOAD	VALUE, CAPITAL_A
	STORE	VALUE, 0012
	LOAD 	VALUE, LETTER_p
	STORE 	VALUE, 0013
	LOAD 	VALUE, LETTER_r
	STORE	VALUE, 0014
	LOAD	VALUE, SPACE
	STORE 	VALUE, 0015
	LOAD 	VALUE, NUMBER_9
	STORE	VALUE, 0016
	LOAD 	VALUE, SPACE 
	STORE	VALUE, 0017
	LOAD	VALUE, LETTER_o
	STORE 	VALUE, 0018
	LOAD 	VALUE, LETTER_n
	STORE	VALUE, 0019
	LOAD 	VALUE, SPACE
	STORE 	VALUE, 001A
	LOAD 	VALUE, LETTER_n
	STORE	VALUE, 001B
	LOAD 	VALUE, LETTER_p
	STORE	VALUE, 001C
	LOAD 	VALUE, LETTER_d
	STORE 	VALUE, 001D
	LOAD 	VALUE, NUMBER_1
	STORE 	VALUE, 001E
	LOAD  	VALUE, NUMBER_2
	STORE 	VALUE, 001F
	LOAD 	VALUE, NUMBER_3
	STORE 	VALUE, 0020
	;----------------------------
	;NEW LINE
	LOAD 	VALUE, CR
	STORE	VALUE, 0021
	LOAD 	VALUE, LF
	STORE 	VALUE, 0022
	
	;----------------------------
	;Prompt	
	;NGUYENs-MBP:~ nguyendoan$ 
	;----------------------------
	LOAD	VALUE, CAPITAL_N
	STORE	VALUE, 0023
	LOAD 	VALUE, CAPITAL_G
	STORE 	VALUE, 0024
	LOAD 	VALUE, CAPITAL_U
	STORE 	VALUE, 0025
	LOAD 	VALUE, CAPITAL_Y
	STORE 	VALUE, 0026
	LOAD 	VALUE, CAPITAL_E
	STORE 	VALUE, 0027
	LOAD 	VALUE, CAPITAL_N
	STORE	VALUE, 0028 
	LOAD 	VALUE, LETTER_s
	STORE	VALUE, 0029
	LOAD 	VALUE, SYMBOL_~
	STORE 	VALUE, 002A
	LOAD 	VALUE, CAPITAL_M
	STORE 	VALUE, 002B
	LOAD 	VALUE, CAPITAL_B
	STORE	VALUE, 002C
	LOAD	VALUE, CAPITAL_P
	STORE 	VALUE, 002D
	LOAD 	VALUE, SYMBOL_:
	STORE 	VALUE, 002E
	LOAD 	VALUE, SYMBOL_~
	STORE	VALUE, 002F
	LOAD 	VALUE, SPACE 
	STORE 	VALUE, 0030
	LOAD 	VALUE, LETTER_n
	STORE	VALUE, 0031
	LOAD 	VALUE, LETTER_g
	STORE 	VALUE, 0032
	LOAD 	VALUE, LETTER_u
	STORE 	VALUE, 0033
	LOAD 	VALUE, LETTER_y
	STORE 	VALUE, 0034
	LOAD 	VALUE, LETTER_e
	STORE	VALUE, 0035
	LOAD 	VALUE, LETTER_n
	STORE 	VALUE, 0036
	LOAD 	VALUE, LETTER_d
	STORE 	VALUE, 0037
	LOAD 	VALUE, LETTER_o
	STORE	VALUE, 0038
	LOAD 	VALUE, LETTER_a
	STORE	VALUE, 0039
	LOAD 	VALUE, LETTER_n
	STORE 	VALUE, 003A
	LOAD 	VALUE, SYMBOL_$
	STORE 	VALUE, 003B 
	LOAD 	VALUE, SPACE 
	STORE	VALUE, 003C

	; BACKSPACE 
	LOAD 	VALUE, BACKSPACE
	STORE 	VALUE, 0042 
	LOAD 	VALUE, SPACE 
	STORE 	VALUE, 0043
	LOAD 	VALUE, BACKSPACE 
	STORE	VALUE, 0044
	
	; HOMETOWN 
	LOAD	VALUE, CAPITAL_V
	STORE 	VALUE, 0045
	LOAD 	VALUE, CAPITAL_I	
	STORE 	VALUE, 0046
	LOAD 	VALUE, CAPITAL_E
	STORE 	VALUE, 0047 
	LOAD 	VALUE, CAPITAL_T
	STORE 	VALUE, 0048
	LOAD 	VALUE, SPACE 
	STORE 	VALUE, 0049
	LOAD 	VALUE, CAPITAL_N
	STORE 	VALUE, 0050 
	LOAD 	VALUE, CAPITAL_A
	STORE 	VALUE, 0051
	LOAD 	VALUE, CAPITAL_M
	STORE	VALUE, 0052
	LOAD 	VALUE, SPACE 
	STORE 	VALUE, 0053
	
	LOAD 	VALUE, 0000
	STORE	VALUE, 0099
	
	;initialize flags, counters	
	LOAD	BANNER_FLAG, ZEROS
	LOAD 	IN_COUNT, ZEROS
	LOAD	COUNT, ZEROS
	LOAD	POINT, ZEROS
	LOAD	PROMPT_FLAG, ZEROS
	LOAD 	NL_FLAG, ZEROS
	LOAD	BS_FLAG, ZEROS
	LOAD 	LED, ZEROS 
	LOAD	IN, ZEROS
	LOAD 	LED_COUNT, ZEROS
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Main Loop comprised of routine calls with jump back to main
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		ENINT
MAIN		ADD 	LED_COUNT, ONE 
		COMP	LED_COUNT, FF00
		CALLZ 	LEDOUT	
		JUMP 	MAIN
	 	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Routines called by the main loop
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	      
LEDOUT		ADD	LED, ONE
		OUTPUT	LED, LED_ADR
		LOAD 	LED_COUNT, ZEROS
		RETURN	

UART_CONTROL 	INPUT	VALUE, UART_CONFIG
		OUTPUT 	VALUE, UART_CONFIG 
		RETURN


BOTH_RDY	CALL	TX_RDY
		CALL	RX_RDY
		RETURN

TX_RDY		LOAD 	TX_FLAG, ZEROS
		COMP	BANNER_FLAG, ONE 
		CALLNZ 	PRINT_BANNER
		COMP	TX_FLAG, ONE 
		RETURNZ
		COMP	NL_FLAG, ONE
		CALLNZ 	PRINT_NEWLINE 
		COMP	TX_FLAG, ONE
		RETURNZ 
		COMP 	PROMPT_FLAG, ONE
		CALLNZ 	PRINT_PROMPT
		COMP	TX_FLAG, ONE
		RETURNZ
		COMP 	BS_FLAG, ONE 
		CALLZ 	PRINT_BS
		COMP	TX_FLAG, ONE 
		RETURNZ
		COMP	BS_FLAG, 0003
		CALLZ	PRINT_HT
		COMP	TX_FLAG, ONE
		RETURNZ
		COMP 	BS_FLAG, 0002
		CALLZ	PRINT_NUMIN
		RETURN

PRINT_NUMIN	LOAD	TX_FLAG, ONE 
		FETCH	VALUE, POINT
		OUTPUT	VALUE, DATA_ADR
		ADD 	POINT, ONE 
		COMP 	POINT, 0105
		CALLZ 	NUMIN_DONE
		RETURN

NUMIN_DONE	LOAD	BS_FLAG, ZEROS
		LOAD 	PROMPT_FLAG, ZEROS 
		LOAD	NL_FLAG, ZEROS
		LOAD	POINT, 0021
		RETURN

PRINT_HT	LOAD 	TX_FLAG, ONE
		FETCH 	VALUE, POINT
		OUTPUT	VALUE, DATA_ADR
		ADD	POINT, ONE 
		COMP	POINT, 0054
		CALLZ 	HT_DONE
		RETURN

HT_DONE		LOAD	BS_FLAG, ZEROS
		RETURN

PRINT_BS	LOAD	TX_FLAG, ONE
		FETCH 	VALUE, POINT 
		OUTPUT 	VALUE, DATA_ADR
		ADD 	POINT, ONE 
		COMP 	POINT, 0045
		CALLZ 	BS_DONE
		RETURN

BS_DONE		LOAD 	BS_FLAG, ZEROS
		SUB	IN_COUNT, ONE
		RETURN 

PRINT_NEWLINE	LOAD 	TX_FLAG, ONE 
		FETCH 	VALUE, POINT 
		OUTPUT	VALUE, DATA_ADR
		ADD 	POINT, ONE 
		COMP	POINT, 0023
		CALLZ 	NEWLINE_DONE
		RETURN

NEWLINE_DONE	LOAD 	NL_FLAG, ONE
		RETURN

PRINT_PROMPT 	LOAD 	TX_FLAG, ONE
		FETCH 	VALUE, POINT 
		OUTPUT 	VALUE, DATA_ADR 
		ADD	POINT, ONE 		
		COMP	POINT, 003D
		CALLZ 	PROMPT_DONE
		LOAD 	IN_COUNT, ZEROS
		RETURN

PROMPT_DONE	LOAD	PROMPT_FLAG, ONE
		RETURN

PRINT_BANNER	LOAD 	TX_FLAG, ONE
		FETCH 	VALUE, POINT
		OUTPUT	VALUE, DATA_ADR
		ADD 	POINT, ONE 
		COMP 	POINT, 0021
		CALLZ 	BANNER_DONE
		RETURN

BANNER_DONE	LOAD	BANNER_FLAG, ONE 
		RETURN
				

RX_RDY		ADD	COUNT, ONE
		CALL	BIN2ASC
		INPUT 	IN, DATA_ADR
		COMP 	IN, CR 
		CALLZ 	CR_IN
		COMP 	IN, BACKSPACE 
		CALLZ	BACKSPACE_IN 
		COMP	IN, SYMBOL_*
		CALLZ 	HT_IN
		COMP	IN, SYMBOL_@
		CALLZ	NUMIN_IN
		CALL 	CHARACTER_IN 
		RETURN

CHARACTER_IN	COMP	IN, CR 
		RETURNZ
		COMP	IN, BACKSPACE
		RETURNZ
		COMP 	IN, SYMBOL_*
		RETURNZ
		COMP	IN, SYMBOL_@
		RETURNZ
		OUTPUT 	IN, DATA_ADR
		ADD 	IN_COUNT, ONE 
		COMP 	IN_COUNT, 0028
		RETURNNZ
		LOAD 	POINT, 0021
		LOAD 	PROMPT_FLAG, ZEROS
		LOAD 	NL_FLAG, ZEROS
		RETURN

NUMIN_IN	LOAD 	POINT, 0100
		LOAD	BS_FLAG, 0002
		FETCH 	VALUE, POINT 
		OUTPUT 	VALUE, DATA_ADR
		ADD	POINT, ONE 
		RETURN		

HT_IN		LOAD 	POINT, 0045
		LOAD 	BS_FLAG, 0003
		ADD	IN_COUNT, 0009
		FETCH 	VALUE, POINT
		OUTPUT 	VALUE, DATA_ADR
		ADD 	POINT, ONE
		RETURN

BACKSPACE_IN 	COMP 	IN_COUNT, ZEROS
		RETURNZ 
		LOAD 	POINT, 0042
		LOAD 	BS_FLAG, ONE
		FETCH 	VALUE, POINT 
		OUTPUT 	VALUE, DATA_ADR
		ADD	POINT, ONE
		RETURN

CR_IN		LOAD 	POINT, 0021
		LOAD 	NL_FLAG, ZEROS
		LOAD	PROMPT_FLAG, ZEROS
		FETCH 	VALUE, POINT 
		OUTPUT 	VALUE, DATA_ADR 
		ADD	POINT, ONE
		RETURN

BIN2ASC 	LOAD 	RE, COUNT
		LOAD	RD, 2710
		CALL 	FINDIT
		ADD	RB, 0030
		STORE	RB, 0100
		LOAD	RD, 03E8
		CALL	FINDIT
		ADD 	RB, 0030
		STORE	RB, 0101
		LOAD 	RD, 0064
		CALL	FINDIT
		ADD	RB, 0030
		STORE 	RB, 0102
		LOAD 	RD, 000A
		CALL	FINDIT
		ADD	RB, 0030
		STORE	RB, 0103
		ADD	RE, 0030
		STORE	RE, 0104
		RETURN

FINDIT		LOAD	RB, 0000
BACK		SUB	RE, RD
		JUMPC	YES
		ADD 	RB, 0001
		JUMP	BACK
YES		ADD 	RE, RD
		RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Interrupt service routine - when a reset occurs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ISR    		INPUT	STATUS, STATUS_ADR
		AND 	STATUS, 0003
		COMP 	STATUS, 0003
		CALLZ 	BOTH_RDY 
		COMP 	STATUS, 0002
		CALLZ 	TX_RDY
		COMP	STATUS, 0001
		CALLZ 	RX_RDY
		RETEN



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Vector to Interrupt Service Routine - NO CHANGES HERE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        address 0FFE
        JUMP    ISR

